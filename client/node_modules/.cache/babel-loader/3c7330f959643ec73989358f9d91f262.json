{"ast":null,"code":"import _slicedToArray from \"/home/oem/Desktop/Stocks/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/oem/Desktop/Stocks/client/src/components/StockResults.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateStockData, clearStocks } from '../actions/stockdata';\nimport StockChart from './StockChart';\nimport PredictStock from './PredictStock';\n\nconst StockResults = ({\n  companyTicker,\n  clearStocks,\n  updateStockData,\n  stockdata: {\n    x,\n    y,\n    line,\n    loading,\n    company_ticker,\n    name\n  }\n}) => {\n  const _useState = useState('daily'),\n        _useState2 = _slicedToArray(_useState, 2),\n        frequency = _useState2[0],\n        setFrequency = _useState2[1];\n\n  const _useState3 = useState({\n    daily: 'true',\n    monthly: null,\n    yearly: null\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        frequencyRadio = _useState4[0],\n        setFrequencyRadio = _useState4[1];\n\n  const daily = frequencyRadio.daily,\n        monthly = frequencyRadio.monthly,\n        yearly = frequencyRadio.yearly;\n\n  const changeTimeSpan = frequency => {\n    if (frequency === 'daily') setFrequencyRadio({\n      daily: 'checked'\n    });else if (frequency === 'monthly') setFrequencyRadio({\n      monthly: 'checked'\n    });else if (frequency === 'yearly') setFrequencyRadio({\n      yearly: 'checked'\n    });\n    setFrequency(frequency);\n    clearStocks();\n    updateStockData(companyTicker, frequency);\n  };\n\n  useEffect(() => {\n    clearStocks();\n    updateStockData(companyTicker, frequency);\n  }, [companyTicker]);\n  return React.createElement(\"div\", {\n    className: \"center-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \" Company: \", name), React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \" NASDAQ: \", company_ticker), !loading && x != null && y != null && line != null ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(StockChart, {\n    x: x,\n    y: y,\n    l: line,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      margin: '2%',\n      display: 'inline-block'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Select a Time frame: \"), React.createElement(\"label\", {\n    className: \"container\",\n    style: {\n      display: 'inline-block',\n      marginRight: '2%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Daily\", React.createElement(\"input\", {\n    onChange: () => changeTimeSpan('daily'),\n    type: \"radio\",\n    checked: daily,\n    name: \"radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"checkmark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    className: \"container\",\n    style: {\n      display: 'inline-block',\n      marginRight: '2%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"monthly\", React.createElement(\"input\", {\n    onChange: () => changeTimeSpan('monthly'),\n    checked: monthly,\n    type: \"radio\",\n    name: \"radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"checkmark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    className: \"container\",\n    style: {\n      display: 'inline-block',\n      marginRight: '2%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Yearly\", React.createElement(\"input\", {\n    onChange: () => changeTimeSpan('yearly'),\n    checked: yearly,\n    type: \"radio\",\n    name: \"radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"checkmark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), React.createElement(PredictStock, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n};\n\nStockResults.propTypes = {\n  updateStockData: PropTypes.func.isRequired,\n  stockdata: PropTypes.object.isRequired,\n  clearStocks: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  stockdata: state.stockdata\n});\n\nexport default connect(mapStateToProps, {\n  updateStockData,\n  clearStocks\n})(StockResults);","map":{"version":3,"sources":["/home/oem/Desktop/Stocks/client/src/components/StockResults.js"],"names":["React","useEffect","useState","Link","Redirect","connect","PropTypes","updateStockData","clearStocks","StockChart","PredictStock","StockResults","companyTicker","stockdata","x","y","line","loading","company_ticker","name","frequency","setFrequency","daily","monthly","yearly","frequencyRadio","setFrequencyRadio","changeTimeSpan","margin","display","marginRight","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, {useEffect, useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateStockData, clearStocks } from '../actions/stockdata';\nimport StockChart from './StockChart';\nimport PredictStock from './PredictStock';\n\nconst StockResults = ({companyTicker, clearStocks, updateStockData, stockdata: { x, y, line, loading, company_ticker, name }}) => {\n\n   const [ frequency, setFrequency ] = useState('daily')\n   const [ frequencyRadio, setFrequencyRadio ] = useState({\n      daily:'true',\n      monthly: null,\n      yearly: null\n   })\n   const { daily, monthly, yearly } = frequencyRadio\n   const changeTimeSpan = frequency => {\n      if (frequency === 'daily')\n         setFrequencyRadio({daily: 'checked' });\n      else if (frequency === 'monthly')\n         setFrequencyRadio({monthly: 'checked' });\n      else if (frequency === 'yearly')\n         setFrequencyRadio({yearly: 'checked' });\n      setFrequency(frequency)\n      clearStocks()\n      updateStockData(companyTicker, frequency)\n   }\n\n   useEffect(() => {\n      clearStocks()\n      updateStockData(companyTicker, frequency)\n   }, [companyTicker])\n\n   return (\n      <div className='center-container'>\n         <h6> Company: { name }</h6>\n         <h6> NASDAQ: { company_ticker }</h6>\n         {!loading && x != null && y != null && line != null ?\n            (\n               <div>\n                  <StockChart x={x} y={y} l={line}/>\n                     <div style={{margin: '2%', display: 'inline-block'}}>Select a Time frame: </div>\n                     <label className=\"container\" style={{display: 'inline-block', marginRight: '2%'}}>Daily\n                       <input\n                          onChange={() => changeTimeSpan('daily')}\n                          type=\"radio\"\n                          checked={daily}\n                          name=\"radio\"/>\n                       <span className=\"checkmark\"></span>\n                     </label>\n                     <label className=\"container\" style={{display: 'inline-block',marginRight: '2%'}}>monthly\n                       <input\n                          onChange={() => changeTimeSpan('monthly')}\n                          checked={monthly}\n                          type=\"radio\"\n                          name=\"radio\"/>\n                       <span className=\"checkmark\"></span>\n                     </label>\n                     <label className=\"container\" style={{display: 'inline-block', marginRight: '2%'}}>Yearly\n                       <input\n                          onChange={() => changeTimeSpan('yearly')}\n                          checked={yearly}\n                          type=\"radio\"\n                          name=\"radio\"/>\n                       <span className=\"checkmark\"></span>\n                     </label>\n                  <PredictStock />\n               </div>\n            ) :\n            (<div></div>)}\n      </div>\n\n   )\n}\n\nStockResults.propTypes = {\n   updateStockData: PropTypes.func.isRequired,\n   stockdata: PropTypes.object.isRequired,\n   clearStocks: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n   stockdata: state.stockdata\n});\n\nexport default connect(mapStateToProps, { updateStockData,  clearStocks })(StockResults);\n"]},"metadata":{},"sourceType":"module"}