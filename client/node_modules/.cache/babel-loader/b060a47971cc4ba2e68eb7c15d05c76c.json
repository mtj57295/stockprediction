{"ast":null,"code":"var _jsxFileName = \"/home/oem/Desktop/Stocks/client/src/components/TwitterResults.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateTwitterResults, clearTwitterResults } from '../actions/twitterresults';\nimport TwitterChart from './TwitterChart';\nimport TwitterPostings from './TwitterPostings';\n\nconst TwitterResults = ({\n  company,\n  clearTwitterResults,\n  updateTwitterResults,\n  twitteresults: {\n    count,\n    negative,\n    neutral,\n    positive,\n    subjectivityAvg,\n    tweets,\n    loading\n  }\n}) => {\n  useEffect(() => {\n    clearTwitterResults();\n    updateTwitterResults(company);\n  }, [company]);\n  return React.createElement(\"div\", {\n    className: \"center-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, !loading && negative != null && neutral != null && positive != null ? React.createElement(TwitterChart, {\n    count: count,\n    negative: negative,\n    neutral: neutral,\n    positive: positive,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), !loading && tweets != null ? React.createElement(TwitterPostings, {\n    tweets: tweets,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n};\n\nTwitterResults.propTypes = {\n  twitteresults: PropTypes.object.isRequired,\n  updateTwitterResults: PropTypes.func.isRequired,\n  clearTwitterResults: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  twitteresults: state.twitterresults\n});\n\nexport default connect(mapStateToProps, {\n  updateTwitterResults,\n  clearTwitterResults\n})(TwitterResults);","map":{"version":3,"sources":["/home/oem/Desktop/Stocks/client/src/components/TwitterResults.js"],"names":["React","useEffect","useState","Link","Redirect","connect","PropTypes","updateTwitterResults","clearTwitterResults","TwitterChart","TwitterPostings","TwitterResults","company","twitteresults","count","negative","neutral","positive","subjectivityAvg","tweets","loading","propTypes","object","isRequired","func","mapStateToProps","state","twitterresults"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,kBAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,QAA0D,2BAA1D;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWJ,EAAAA,mBAAX;AAAgCD,EAAAA,oBAAhC;AAAsDM,EAAAA,aAAa,EACxF;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,OAAnB;AAA4BC,IAAAA,QAA5B;AAAsCC,IAAAA,eAAtC;AAAuDC,IAAAA,MAAvD;AAA+DC,IAAAA;AAA/D;AADqB,CAAD,KACyD;AAE7EnB,EAAAA,SAAS,CAAC,MAAM;AACbO,IAAAA,mBAAmB;AACnBD,IAAAA,oBAAoB,CAACK,OAAD,CAApB;AACF,GAHQ,EAGN,CAACA,OAAD,CAHM,CAAT;AAMA,SACG;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,CAACQ,OAAD,IAAYL,QAAQ,IAAI,IAAxB,IAAgCC,OAAO,IAAI,IAA3C,IAAmDC,QAAQ,IAAI,IAA/D,GAEE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEH,KAArB;AAA4B,IAAA,QAAQ,EAAEC,QAAtC;AAAgD,IAAA,OAAO,EAAEC,OAAzD;AAAkE,IAAA,QAAQ,EAAEC,QAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,GAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAMI,CAACG,OAAD,IAAYD,MAAM,IAAI,IAAtB,GAA8B,oBAAC,eAAD;AAAiB,IAAA,MAAM,EAAEA,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA9B,GAAqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANzE,CADH;AAUF,CAnBD;;AAqBAR,cAAc,CAACU,SAAf,GAA2B;AACxBR,EAAAA,aAAa,EAAEP,SAAS,CAACgB,MAAV,CAAiBC,UADR;AAExBhB,EAAAA,oBAAoB,EAAED,SAAS,CAACkB,IAAV,CAAeD,UAFb;AAGxBf,EAAAA,mBAAmB,EAAEF,SAAS,CAACkB,IAAV,CAAeD;AAHZ,CAA3B;;AAMA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC/Bb,EAAAA,aAAa,EAAEa,KAAK,CAACC;AADU,CAAL,CAA7B;;AAIA,eAAetB,OAAO,CAACoB,eAAD,EAAkB;AAAElB,EAAAA,oBAAF;AAAwBC,EAAAA;AAAxB,CAAlB,CAAP,CAAwEG,cAAxE,CAAf","sourcesContent":["import React, {useEffect, useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateTwitterResults, clearTwitterResults } from '../actions/twitterresults';\nimport TwitterChart from './TwitterChart';\nimport TwitterPostings from './TwitterPostings';\n\nconst TwitterResults = ({ company, clearTwitterResults, updateTwitterResults, twitteresults:\n   { count, negative, neutral, positive, subjectivityAvg, tweets, loading}}) => {\n\n   useEffect(() => {\n      clearTwitterResults()\n      updateTwitterResults(company)\n   }, [company])\n\n\n   return (\n      <div className='center-container'>\n         {!loading && negative != null && neutral != null && positive != null ?\n         (\n            <TwitterChart count={count} negative={negative} neutral={neutral} positive={positive}/>\n         ) :\n         (<div></div>)}\n         {!loading && tweets != null ? (<TwitterPostings tweets={tweets}/>) : (<div></div>)}\n      </div>\n   )\n}\n\nTwitterResults.propTypes = {\n   twitteresults: PropTypes.object.isRequired,\n   updateTwitterResults: PropTypes.func.isRequired,\n   clearTwitterResults: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n   twitteresults: state.twitterresults\n});\n\nexport default connect(mapStateToProps, { updateTwitterResults, clearTwitterResults })(TwitterResults);\n"]},"metadata":{},"sourceType":"module"}